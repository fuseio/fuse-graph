type BridgeMapping @entity {
  id: ID!
  key: Bytes! # bytes32
  foreignToken: Bytes! # address
  homeToken: Bytes! # address
  foreignBridge: Bytes! # address
  homeBridge: Bytes! # address
  foreignStartBlock: BigInt
  homeStartBlock: BigInt
  blockNumber: BigInt!
  txHash: Bytes!
  originNetwork: String
}

type Token @entity {
  id: ID!
  address: Bytes!
  symbol: String!
  name: String!
  totalSupply: BigInt!
  decimals: Int!
  communityAddress: Bytes
  originNetwork: String
}

type HomeBridgeErcToErc @entity {
  id: ID!
  address: Bytes!
  tokenAddress: Bytes!
  owner: Bytes
  validatorContract: Bytes
  dailyLimit: BigInt
  maxPerTx: BigInt
  minPerTx: BigInt
  homeGasPrice: BigInt
  requiredBlockConfirmations: BigInt
  foreignDailyLimit: BigInt
  foreignMaxPerTx: BigInt
}

type UserRequestForSignatureEvent @entity {
  id: ID!
  txHash: Bytes!
  blockNumber: BigInt!
  recipient: Bytes!
  value: BigInt!
  data: Bytes
  bridgeAddress: Bytes!
  tokenAddress: Bytes!
}

type CollectedSignaturesEvent @entity {
  id: ID!
  txHash: Bytes!
  blockNumber: BigInt!
  authorityResponsibleForRelay: Bytes!
  messageHash: Bytes!
  numberOfCollectedSignatures: BigInt!
  bridgeAddress: Bytes!
}


type Wallet @entity {
  id: ID!
  address: Bytes!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: Int!
  owner: Bytes
  modules: Int
  implementation: Bytes
}

type AccountToken @entity {
  "Concatenation of Token address and user address"
  id: ID!
  tokenAddress: Bytes!
  account: Account!
  txHashes: [Bytes!]!
  blockNumbers: [BigInt!]!
  balance: BigInt!
}

type Account @entity {
  id: ID!
  address: Bytes!
  tokens: [AccountToken!]! @derivedFrom(field: "account")
}

type TransferEvent @entity {
  id: ID!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: Int!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  data: Bytes
  tokenAddress: Bytes
}

type Community @entity {
  id: ID!
  address: Bytes!
  name: String!
  entitiesList: EntitiesList!
  # tokens: [Token!]! @derivedFrom(field: "community")
}

type EntitiesList @entity {
  id: ID!
  address: Bytes!
  communityEntities: [CommunityEntity!]! @derivedFrom(field: "entitiesList")
}

type CommunityEntity @entity {
  id: ID!
  address: Bytes!
  isUser: Boolean!
  isAdmin: Boolean!
  isBusiness: Boolean!
  isApproved: Boolean!
  roles: Bytes!
  entitiesList: EntitiesList!
  createdAt: Int!
}